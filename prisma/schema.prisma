// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Organization model
model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  plan      PlanType @default(FREE)
  logoUrl   String?  @map("logo_url")
  settings  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  users UserOrganization[]
  bots  Bot[]
  templates Template[]

  @@map("organizations")
}

// User model (references Supabase Auth users)
model User {
  id        String   @id
  email     String   @unique
  firstName String?  @map("first_name")
  lastName  String?  @map("last_name")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  organizations UserOrganization[]
  bots          Bot[]
  integrations  Integration[]
  credentials   Credential[]
  survey        Survey? // Added relation to Survey
  templates     Template[] // Added relation to Template

  @@map("users")
}

// Junction table for User and Organization with roles
model UserOrganization {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  role           UserRole @default(MEMBER)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@map("user_organizations")
}

// Bot model - each organization can have multiple bots
model Bot {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  name           String
  description    String?
  systemPrompt   String   @map("system_prompt")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  knowledgeBases   KnowledgeBase[]
  botTools         BotTool[]
  toolUsageMetrics ToolUsageMetric[]
  leads            Lead[]
  conversations    Conversation[]
  deployments      Deployment[]
  integrations     Integration[]
  appointments     Appointment[]

  @@index([userId])
  @@index([organizationId])
  @@map("bots")
}

// Tool Category model - for organizing tools by category
model ToolCategory {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  iconName    String?  @map("icon_name")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  tools Tool[]

  @@map("tool_categories")
}

// Tool model - represents available tools that can be used by bots
model Tool {
  id              String   @id @default(uuid())
  name            String
  description     String?
  type            ToolType
  isActive        Boolean  @default(true) @map("is_active")
  integrationType String?  @map("integration_type") // e.g., "google", "gohighlevel"
  requiredConfigs Json?    @map("required_configs") // JSON schema for required configuration
  functions       Json? // Available functions/operations for this tool
  functionsSchema Json?    @map("functions_schema") // Optional schema definition for available functions
  version         String   @default("1.0.0")
  categoryId      String?  @map("category_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  category         ToolCategory?        @relation(fields: [categoryId], references: [id])
  botTools         BotTool[]
  toolUsageMetrics ToolUsageMetric[]
  executionErrors  ToolExecutionError[]

  @@index([categoryId])
  @@map("tools")
}

// New Credential model for unified auth storage
model Credential {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  provider    String // e.g., "slack", "google", "hubspot"
  credentials Json // Contains { access_token, refresh_token, scopes[], expires_at, etc. }
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  botTools     BotTool[]
  integrations Integration[]

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@map("credentials")
}

// Junction table between Bots and Tools with tool-specific config
model BotTool {
  id           String   @id @default(uuid())
  botId        String   @map("bot_id")
  toolId       String   @map("tool_id")
  credentialId String?  @map("credential_id")
  isEnabled    Boolean  @default(true) @map("is_enabled")
  config       Json? // Tool-specific configuration as JSONB
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  bot        Bot         @relation(fields: [botId], references: [id], onDelete: Cascade)
  tool       Tool        @relation(fields: [toolId], references: [id], onDelete: Cascade)
  credential Credential? @relation(fields: [credentialId], references: [id])

  @@unique([botId, toolId])
  @@index([botId])
  @@index([toolId])
  @@index([credentialId])
  @@map("bot_tools")
}

// Tool usage metrics
model ToolUsageMetric {
  id         String   @id @default(uuid())
  toolId     String   @map("tool_id")
  botId      String   @map("bot_id")
  functionId String   @map("function_id") // ID/name of the specific function used
  count      Int      @default(0)
  lastUsed   DateTime @default(now()) @map("last_used")

  // Relations
  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)
  bot  Bot  @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([toolId, botId, functionId])
  @@map("tool_usage_metrics")
}

// Tool execution errors
model ToolExecutionError {
  id           String   @id @default(uuid())
  toolId       String   @map("tool_id")
  botId        String?  @map("bot_id")
  functionName String   @map("function_name")
  errorMessage String   @map("error_message")
  errorStack   String?  @map("error_stack")
  params       Json? // The params that caused the error
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([toolId])
  @@map("tool_execution_errors")
}

// Knowledge Base model - collection of knowledge documents for a bot
model KnowledgeBase {
  id          String   @id @default(uuid())
  botId       String   @map("bot_id")
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  bot   Bot             @relation(fields: [botId], references: [id], onDelete: Cascade)
  files KnowledgeFile[]

  @@index([botId])
  @@map("knowledge_bases")
}

// Knowledge File model - individual files in a knowledge base
model KnowledgeFile {
  id              String          @id @default(uuid())
  knowledgeBaseId String          @map("knowledge_base_id")
  fileName        String          @map("file_name")
  fileType        String          @map("file_type")
  filePath        String          @map("file_path") // Path in Supabase Storage
  fileSize        Int             @map("file_size") // In bytes
  embeddingStatus EmbeddingStatus @default(PENDING) @map("embedding_status")
  metadata        Json?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  knowledgeBase KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)

  @@index([knowledgeBaseId])
  @@map("knowledge_files")
}

// Integration model - external service connections per user
model Integration {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  botId            String           @map("bot_id")
  name             String
  provider         String // E.g., "hubspot", "gohighlevel", "google"
  type             IntegrationType
  authCredentials  Json             @map("auth_credentials") // Encrypted credentials
  credentialId     String?          @map("credential_id")
  metadata         Json?            @map("metadata") // Additional metadata about the integration
  config           Json?            @map("config") // Configuration for the integration
  connectionStatus ConnectionStatus @default(CONNECTED) @map("connection_status")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bot         Bot          @relation(fields: [botId], references: [id], onDelete: Cascade)
  credential  Credential?  @relation(fields: [credentialId], references: [id])
  deployments Deployment[]

  @@index([userId])
  @@index([botId])
  @@index([credentialId])
  @@map("integrations")
}

// Deployment model - tracking where bots are deployed
model Deployment {
  id            String           @id @default(uuid())
  botId         String           @map("bot_id")
  type          DeploymentType
  config        Json // Configuration specific to deployment type with channels array for channel-specific settings
  status        DeploymentStatus @default(ACTIVE)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  integrationId String?          @map("integration_id")

  // Relations
  bot         Bot          @relation(fields: [botId], references: [id], onDelete: Cascade)
  integration Integration? @relation(fields: [integrationId], references: [id])

  @@index([botId])
  @@map("deployments")
}

// Conversation history
model Conversation {
  id             String             @id @default(uuid())
  botId          String             @map("bot_id")
  externalUserId String?            @map("external_user_id") // User ID from external system if available
  source         String?            @default("playground") // Where the conversation originated from (playground, iframe, sdk, etc.)
  startedAt      DateTime           @default(now()) @map("started_at")
  endedAt        DateTime?          @map("ended_at")
  status         ConversationStatus @default(ACTIVE) // Status of the conversation
  metadata       Json? // General metadata about the conversation
  clientInfo     Json?              @map("client_info") // Info about client (browser, device, etc.)
  sentiment      Float? // Optional sentiment score (-1 to 1)
  errorLog       Json?              @map("error_log") // Any errors that occurred during the conversation

  // Relations
  messages       Message[]
  toolExecutions ToolExecution[]
  bot            Bot             @relation(fields: [botId], references: [id], onDelete: Cascade)
  leads          Lead[]
  appointments   Appointment[]

  @@index([botId])
  @@index([externalUserId])
  @@index([source])
  @@index([startedAt])
  @@index([status])
  @@map("conversations")
}

// Individual messages in conversations
model Message {
  id               String      @id @default(uuid())
  conversationId   String      @map("conversation_id")
  role             MessageRole
  content          String
  responseMessages Json?       @map("response_messages") // JSON containing response messages that were generated during the call (assistant/tool)
  contextUsed      Json?       @map("context_used") // Context from knowledge base that was used
  processingTime   Int?        @map("processing_time") // Processing time in milliseconds
  tokenCount       Int?        @map("token_count") // Number of tokens in the message
  timestamp        DateTime    @default(now())

  // Relations
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  toolExecutions ToolExecution[]

  @@index([conversationId])
  @@index([timestamp])
  @@map("messages")
}

// Tool execution details
model ToolExecution {
  id             String          @id @default(uuid())
  messageId      String          @map("message_id")
  conversationId String          @map("conversation_id")
  toolId         String          @map("tool_id")
  functionName   String          @map("function_name")
  params         Json // Parameters passed to the tool
  result         Json? // Result returned by the tool (may be null if execution failed)
  status         ExecutionStatus @default(PENDING)
  startTime      DateTime        @default(now()) @map("start_time")
  endTime        DateTime?       @map("end_time")
  executionTime  Int?            @map("execution_time") // Execution time in milliseconds
  error          Json? // Error information if the execution failed

  // Relations
  message      Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([conversationId])
  @@index([toolId])
  @@index([status])
  @@map("tool_executions")
}

// OAuth state for temporary state storage
model OAuthState {
  state     String   @id
  userId    String   @map("user_id")
  metadata  String // JSON string with state metadata
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([expiresAt])
  @@map("oauth_states")
}

// Template model for storing prompt templates
model Template {
  id               String            @id @default(uuid())
  name             String
  description      String?
  content          String            // The template with placeholders
  isPublic         Boolean           @default(false) @map("is_public")
  organizationId   String?           @map("organization_id")
  createdBy        String            @map("created_by") // User ID who created this
  placeholderSchema Json             @map("placeholder_schema") // JSON schema for placeholders
  usageCount       Int               @default(0) @map("usage_count")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator          User              @relation(fields: [createdBy], references: [id])
  categories       TemplateCategory[] @relation("TemplatesToCategories")

  @@index([organizationId])
  @@index([createdBy])
  @@index([isPublic])
  @@map("templates")
}

// Category model for template filtering
model TemplateCategory {
  id          String     @id @default(uuid())
  name        String
  description String?
  slug        String     @unique
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  templates   Template[] @relation("TemplatesToCategories")

  @@map("template_categories")
}

// Enums
enum ToolType {
  CALENDAR_BOOKING
  CRM_TAG
  CONTACT_FORM
  DATA_QUERY
  CUSTOM
}

enum IntegrationType {
  CRM
  CALENDAR
  MESSENGER
  EMAIL
  DOCUMENT
  OTHER
}

enum ConnectionStatus {
  CONNECTED
  DISCONNECTED
  EXPIRED
  PENDING
}

enum EmbeddingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DeploymentType {
  WEBSITE
  MESSENGER
  CUSTOM_API
  WEBHOOK
  SLACK
}

enum DeploymentStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum PlanType {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

// Survey model - stores user onboarding survey responses
model Survey {
  id             String   @id @default(uuid())
  userId         String   @unique @map("user_id")
  referralSource String?  @map("referral_source")
  primaryUseCase String[] @map("primary_use_case")
  expectedBots   String?  @map("expected_bots")
  integrations   String[]
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("surveys")
}

// Lead model - stores lead information with flexible structure
model Lead {
  id             String   @id @default(uuid())
  botId          String   @map("bot_id")
  conversationId String?  @map("conversation_id")
  name           String?
  email          String?
  phone          String?
  company        String?
  source         String?  @default("chat")
  status         String?  @default("New")
  triggerKeyword String?  @map("trigger_keyword")
  properties     Json? // JSONB column for storing arbitrary properties
  metadata       Json? // Additional metadata about the lead capture process
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  bot          Bot           @relation(fields: [botId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([botId])
  @@index([conversationId])
  @@index([email])
  @@index([phone])
  @@index([status])
  @@index([createdAt])
  @@map("leads")
}

// Appointment model - stores calendar appointment details
model Appointment {
  id               String   @id @default(uuid())
  botId            String   @map("bot_id")
  conversationId   String?  @map("conversation_id")
  calendarId       String?  @map("calendar_id")
  externalEventId  String?  @map("external_event_id") // ID from the calendar service
  calendarProvider String   @map("calendar_provider") // e.g., "google", "outlook", "apple"
  title            String?
  description      String?
  location         String?
  status           String?  @default("confirmed") // confirmed, cancelled, tentative
  startTime        DateTime @map("start_time")
  endTime          DateTime @map("end_time")
  timeZone         String?  @map("time_zone")
  organizer        Json? // Details about the organizer
  attendees        Json? // Array of attendee objects with names and emails
  recurringPattern String?  @map("recurring_pattern")
  meetingLink      String?  @map("meeting_link")
  source           String?  @default("chat")
  properties       Json? // Provider-specific properties
  metadata         Json? // Additional metadata
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  bot          Bot           @relation(fields: [botId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)

  @@index([botId])
  @@index([conversationId])
  @@index([calendarProvider])
  @@index([startTime])
  @@index([status])
  @@index([createdAt])
  @@map("appointments")
}

// Add new enums
enum ConversationStatus {
  ACTIVE
  COMPLETED
  FAILED
  ABANDONED // User left without completing
}

enum ExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  TIMEOUT
}
